--- a/luaotfload/luaotfload-colors.lua
+++ b/luaotfload/luaotfload-colors.lua
@@ -231,6 +231,7 @@
     return head, current_color, current_transparent
 end
 
+local addpageres = pdf.add_page_resource -- OpTeX, minim
 local getpageres = pdf.getpageresources or function() return pdf.pageresources end
 local setpageres = pdf.setpageresources or function(s) pdf.pageresources = s end
 local catat11    = luatexbase.registernumber("catcodetable@atletter")
@@ -244,7 +245,12 @@
     head = tonode(head)
 
     -- now append our page resources
-    if res and tonumber(transparent_stack) then
+    if res and addpageres then
+        for k in pairs(res) do
+            addpageres("ExtGState", stringformat("TransGs%.3g", k), stringformat("<</ca %.3g>>", k))
+        end
+        res = nil -- reset res
+    elseif res and tonumber(transparent_stack) then
         if scantoks and nil == pgf.loaded then
             pgf.loaded = token.create(pgf.bye).cmdname == "assign_toks"
         end
--- a/luaotfload/luaotfload-database.lua
+++ b/luaotfload/luaotfload-database.lua
@@ -725,7 +725,7 @@
 
 -- MK Added mini scope to avoid variable limit
 do
-local type1_metrics = { "tfm", "ofm", }
+local type1_metrics = { "tfm", "ofm", "afm" }
 -- /MK
 
 function lookup_font_file (filename)
@@ -2324,6 +2324,8 @@
             logreport ("both", 3, "db",
                        "Path %q matches $PWD (%q), skipping.",
                        dir, pwd)
+            -- we should also look for local files
+            config.luaotfload.db.scan_local = true
         else
             result[#result+1] = dir
         end
--- a/luaotfload/luaotfload-parsers.lua
+++ b/luaotfload/luaotfload-parsers.lua
@@ -283,14 +283,9 @@
       if stringsub(path, 1, 1) == "~" then
         path = filejoin(home, stringsub(path, 2))
       end
-      --- We exclude paths with texmf in them, as they should be
-      --- found anyway; also duplicates are ignored by checking
-      --- if they are elements of dirs_done.
-      ---
-      --- FIXME does this mean we cannot access paths from
-      --- distributions (e.g. Context minimals) installed
-      --- separately?
-      if not (stringfind(path, "texmf") or dirs_done[path]) then
+      --- Duplicate paths are ignored by checking if they are
+      --- elements of dirs_done.
+      if not dirs_done[path] then
         logreport ("log", 5, "db",
                    "New fontconfig path at %s.",
                    path)
--- a/luaotfload/luaotfload-resolvers.lua
+++ b/luaotfload/luaotfload-resolvers.lua
@@ -141,7 +141,7 @@
 
 --doc]]--
 
-local tex_formats = { "tfm", "ofm" }
+local tex_formats = { "tfm", "ofm", "afm" }
 
 local resolvers_findfile = luaotfload.fontloader.resolvers.findfile
 local function resolve_tex_format (specification)
