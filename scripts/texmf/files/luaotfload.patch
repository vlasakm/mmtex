--- a/luaotfload/luaotfload-database.lua
+++ b/luaotfload/luaotfload-database.lua
@@ -717,7 +717,7 @@

 -- MK Added mini scope to avoid variable limit
 do
-local type1_metrics = { "tfm", "ofm", }
+local type1_metrics = { "tfm", "ofm", "afm" }
 -- /MK

 function lookup_font_file (filename)
@@ -2319,6 +2319,8 @@
             logreport ("both", 3, "db",
                        "Path %q matches $PWD (%q), skipping.",
                        dir, pwd)
+            -- we should also look for local files
+            config.luaotfload.db.scan_local = true
         else
             result[#result+1] = dir
         end
--- a/luaotfload/luaotfload-parsers.lua
+++ b/luaotfload/luaotfload-parsers.lua
@@ -283,14 +283,9 @@
       if stringsub(path, 1, 1) == "~" then
         path = filejoin(home, stringsub(path, 2))
       end
-      --- We exclude paths with texmf in them, as they should be
-      --- found anyway; also duplicates are ignored by checking
-      --- if they are elements of dirs_done.
-      ---
-      --- FIXME does this mean we cannot access paths from
-      --- distributions (e.g. Context minimals) installed
-      --- separately?
-      if not (stringfind(path, "texmf") or dirs_done[path]) then
+      --- Duplicate paths are ignored by checking if they are
+      --- elements of dirs_done.
+      if not dirs_done[path] then
         logreport ("log", 5, "db",
                    "New fontconfig path at %s.",
                    path)
--- a/luaotfload/luaotfload-resolvers.lua
+++ b/luaotfload/luaotfload-resolvers.lua
@@ -141,7 +141,7 @@

 --doc]]--

-local tex_formats = { "tfm", "ofm" }
+local tex_formats = { "tfm", "ofm", "afm" }

 local resolvers_findfile = luaotfload.fontloader.resolvers.findfile
 local function resolve_tex_format (specification)
